(define-constant ERR-UNAUTHORIZED u100)
(define-constant ERR-INVALID-PRODUCT u101)
(define-constant ERR-NO-CERTIFICATION u102)
(define-constant ERR-NO-EVENTS u104)
(define-constant ERR-INVALID-BATCH u105)
(define-constant ERR-VERIFICATION-FAILED u106)
(define-constant ERR-NO-PRODUCT u108)
(define-constant ERR-NO-BATCH u109)
(define-constant ERR-NO-OWNERSHIP u110)
(define-constant ERR-INVALID-EVENT u111)
(define-constant ERR-INVALID-CERT u112)
(define-constant ERR-INVALID-STATUS u114)
(define-data-var contract-owner principal tx-sender)
(define-data-var verification-threshold uint u50)
(define-data-var max-events-per-product uint u100)
(define-map verifications uint {verified: bool, timestamp: uint, verifier: principal})
(define-constant PRODUCT-REGISTRY 'SP000000000000000000002Q6VF78.product-registry)
(define-constant CERTIFICATION-MANAGER 'SP000000000000000000002Q6VF78.certification-manager)
(define-constant BATCH-TRACKER 'SP000000000000000000002Q6VF78.batch-tracker)
(define-constant EVENT-LOGGER 'SP000000000000000000002Q6VF78.event-logger)
(define-constant OWNERSHIP-TRANSFER 'SP000000000000000000002Q6VF78.ownership-transfer)
(define-public (verify-provenance (product-id uint))
  (let (
    (product-details (unwrap! (contract-call? PRODUCT-REGISTRY get-product-details product-id) (err ERR-NO-PRODUCT)))
    (certifications (unwrap! (contract-call? CERTIFICATION-MANAGER get-certifications product-id) (err ERR-NO-CERTIFICATION)))
    (batch-info (unwrap! (contract-call? BATCH-TRACKER get-batch product-id) (err ERR-NO-BATCH)))
    (events (unwrap! (contract-call? EVENT-LOGGER get-events product-id) (err ERR-NO-EVENTS)))
    (ownership-history (unwrap! (contract-call? OWNERSHIP-TRANSFER get-history product-id) (err ERR-NO-OWNERSHIP)))
    (is-product-valid (try! (validate-product product-details)))
    (is-cert-valid (try! (validate-certifications certifications)))
    (is-batch-valid (try! (validate-batch batch-info)))
    (is-events-valid (try! (validate-events events)))
    (overall-valid (and is-product-valid is-cert-valid is-batch-valid is-events-valid))
  )
    (asserts! overall-valid (err ERR-VERIFICATION-FAILED))
    (map-set verifications product-id {verified: true, timestamp: block-height, verifier: tx-sender})
    (print {event: "provenance-verified", id: product-id})
    (ok {status: "verified", details: product-details, certs: certifications, batch: batch-info, events: events})
  )
)
(define-private (validate-product (details {id: uint, name: (string-ascii 100), origin: (string-ascii 100), valid: bool}))
  (begin
    (asserts! (get valid details) (err ERR-INVALID-PRODUCT))
    (asserts! (> (len (get name details)) u0) (err ERR-INVALID-PRODUCT))
    (asserts! (> (len (get origin details)) u0) (err ERR-INVALID-PRODUCT))
    (ok true)
  )
)
(define-private (validate-certifications (certs (list 10 {type: (string-ascii 50), issuer: principal, valid: bool})))
  (begin
    (asserts! (> (len certs) u0) (err ERR-NO-CERTIFICATION))
    (fold check-cert certs (ok true))
  )
)
(define-private (check-cert (cert {type: (string-ascii 50), issuer: principal, valid: bool}) (acc (response bool uint)))
  (match acc
    ok-val (if (get valid cert) (ok true) (err ERR-INVALID-CERT))
    err-val acc
  )
)
(define-private (validate-batch (info {id: uint, production-date: uint, quantity: uint, compliant: bool}))
  (begin
    (asserts! (get compliant info) (err ERR-INVALID-BATCH))
    (asserts! (> (get quantity info) u0) (err ERR-INVALID-BATCH))
    (ok true)
  )
)
(define-private (validate-events (events (list 100 {type: (string-ascii 50), timestamp: uint, compliant: bool})))
  (begin
    (asserts! (<= (len events) (var-get max-events-per-product)) (err ERR-INVALID-EVENT))
    (asserts! (> (len events) u0) (err ERR-NO-EVENTS))
    (fold check-event events (ok true))
  )
)
(define-private (check-event (event {type: (string-ascii 50), timestamp: uint, compliant: bool}) (acc (response bool uint)))
  (match acc
    ok-val (if (get compliant event) (ok true) (err ERR-INVALID-EVENT))
    err-val acc
  )
)
(define-read-only (get-verification (product-id uint))
  (map-get? verifications product-id)
)
(define-public (set-verification-threshold (new-threshold uint))
  (begin
    (asserts! (is-eq tx-sender (var-get contract-owner)) (err ERR-UNAUTHORIZED))
    (asserts! (and (> new-threshold u0) (<= new-threshold u100)) (err ERR-INVALID-STATUS))
    (var-set verification-threshold new-threshold)
    (ok true)
  )
)
(define-read-only (get-audit-trail (product-id uint))
  (let (
    (product (contract-call? PRODUCT-REGISTRY get-product-details product-id))
    (certs (contract-call? CERTIFICATION-MANAGER get-certifications product-id))
    (batch (contract-call? BATCH-TRACKER get-batch product-id))
    (events (contract-call? EVENT-LOGGER get-events product-id))
  )
    (ok {product: product, certs: certs, batch: batch, events: events})
  )
)